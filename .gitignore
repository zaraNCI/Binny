public class MovingGraphicApp extends JPanel implements ActionListener {

    JFrame jf = new JFrame("Binny Game");
    //Instance of Query

    Query q = new Query();

    ArrayList<TrashObject> imgList = new ArrayList<>();// array for storing trash images

    Random ran = new Random();//for generating random trash images
    Timer tm = new Timer(17, this);//speed for the falling objects

    //Default value for a new instance of user
    User validUser = new User();

    int velocity = 1;
    int x = 0, y = 0;//x and y axis
    int velx = 0, vely = velocity;

    int pos; //the position where random generates the trash
    JLabel time;
    JLabel points;
    JLabel levelup;
    JButton backButton;

    int pointsCount = 0;
    int timeleft = 60;//time set per game 60seconds
    int level = 1;
    int counter = 0;

    boolean endGame = false;
    boolean pause = false;
    Image menuImage = null;
    Image endBinny = null;
    private AudioPlayer audioClip;//badClip, goodClip;
    private HashMap<String, AudioPlayer> sfx;

    BinObject brownBin1, blueBin, blackBin, greenBin;
     public MovingGraphicApp() {

        audioClip = new AudioPlayer("/game/sounds/intro.mid");

        addKeyListener(new Controler(this));
        setFocusable(true);
        setFocusTraversalKeysEnabled(false);
        requestFocus();

        //Get screen size to set jframe size
        /*Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
         double widthScreen = screenSize.getWidth();
         double heightScreen = screenSize.getHeight();*/
        time = new JLabel("Time: 59");
        time.setBounds(20, 10, 50, 20); //setting the time label on screen
        time.setFont(new Font("serif", Font.BOLD, 40));
        time.setForeground(Color.GREEN);

        points = new JLabel("Points: 0");
        points.setBounds(100, 10, 100, 20);
        points.setFont(new Font("serif", Font.BOLD, 40));
        points.setForeground(Color.WHITE);

        levelup = new JLabel("Level: 1");
        levelup.setBounds(700, 10, 100, 20);
        levelup.setFont(new Font("serif", Font.BOLD, 40));
        levelup.setForeground(Color.ORANGE);
        

        backButton = new JButton();
        backButton.setIcon(new ImageIcon(this.getClass().getResource("/game/Levels/Main Menu button.png")));
        backButton.setBounds(this.getWidth() / 2 - 50, this.getHeight() / 2 - 25, 100, 500);
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        /*adding both components */
        add(time);
        add(points);
        add(levelup);
        add(backButton);

        brownBin1 = new BinObject();//instantiate the bins objects
        blueBin = new BinObject();
        greenBin = new BinObject();
        blackBin = new BinObject();

        ImageIcon bin1 = new ImageIcon(getClass().getResource("/game/Bins/Brown Bin.png"));
        brownBin1.setIcon(bin1);

        ImageIcon bin = new ImageIcon(getClass().getResource("/game/Bins/Blue Bin.png"));
        blueBin.setIcon(bin);

        ImageIcon bin2 = new ImageIcon(getClass().getResource("/game/Bins/GreenBin.png"));
        greenBin.setIcon(bin2);

        ImageIcon bin3 = new ImageIcon(getClass().getResource("/game/Bins/Black Bin.png"));
        blackBin.setIcon(bin3);

        //loading images to image array
        File f = new File(getClass().getResource("/game/rubish/").getPath());
        LoadImages(f);
        pos = ran.nextInt(imgList.size());
    }

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {
        jf.setVisible(false);
        jf.dispose();
       
        GUI gui=new GUI();
        gui.setVisible(true);
        
}

//resourced from youtube 
    //serching thru the folder  to upload the images 
    private void LoadImages(File folder) {
        for (File f : folder.listFiles()) {
            if (f.isDirectory()) {
                LoadImages(f);
            } else {
                TrashObject obj = new TrashObject();
                obj.trashType = f.getName().substring(0, f.getName().lastIndexOf("."));
                try {
                    obj.setIcon(new ImageIcon(f.toURL()));
                } catch (MalformedURLException ex) {
                    System.out.println(ex.getMessage());
                }
                obj.setRect(x, y, 100, 100);
                imgList.add(obj);
            }
        }
    }
my code from here
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.awt.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.*;

/*
	This class can be used as a starting point for creating your Chess game project. The only piece that
	has been coded is a white pawn...a lot done, more to do!
 */
public class ChessProject extends JFrame implements MouseListener, MouseMotionListener {

    JLayeredPane layeredPane;
    JPanel chessBoard;
    JLabel chessPiece;
    int xAdjustment;
    int yAdjustment;
    int startX;
    int startY;
    int initialX;
    int initialY;
    JPanel panels;
    JLabel pieces;

    public ChessProject() {
        Dimension boardSize = new Dimension(600, 600);

        //  Use a Layered Pane for this application
        layeredPane = new JLayeredPane();
        getContentPane().add(layeredPane);
        layeredPane.setPreferredSize(boardSize);
        layeredPane.addMouseListener(this);
        layeredPane.addMouseMotionListener(this);

        //Add a chess board to the Layered Pane
        chessBoard = new JPanel();
        layeredPane.add(chessBoard, JLayeredPane.DEFAULT_LAYER);
        chessBoard.setLayout(new GridLayout(8, 8));
        chessBoard.setPreferredSize(boardSize);
        chessBoard.setBounds(0, 0, boardSize.width, boardSize.height);

        for (int i = 0; i < 64; i++) {
            JPanel square = new JPanel(new BorderLayout());
            chessBoard.add(square);

            int row = (i / 8) % 2;
            if (row == 0) {
                square.setBackground(i % 2 == 0 ? Color.white : Color.gray);
            } else {
                square.setBackground(i % 2 == 0 ? Color.gray : Color.white);
            }
        }

        // Setting up the Initial Chess board.
        for (int i = 8; i < 16; i++) {
            pieces = new JLabel(new ImageIcon("WhitePawn.png"));
            panels = (JPanel) chessBoard.getComponent(i);
            panels.add(pieces);
        }
        pieces = new JLabel(new ImageIcon("WhiteRook.png"));
        panels = (JPanel) chessBoard.getComponent(0);
        panels.add(pieces);
        pieces = new JLabel(new ImageIcon("WhiteKnight.png"));
        panels = (JPanel) chessBoard.getComponent(1);
        panels.add(pieces);
        pieces = new JLabel(new ImageIcon("WhiteKnight.png"));
        panels = (JPanel) chessBoard.getComponent(6);
        panels.add(pieces);
        pieces = new JLabel(new ImageIcon("WhiteBishup.png"));
        panels = (JPanel) chessBoard.getComponent(2);
        panels.add(pieces);
        pieces = new JLabel(new ImageIcon("WhiteBishup.png"));
        panels = (JPanel) chessBoard.getComponent(5);
        panels.add(pieces);
        pieces = new JLabel(new ImageIcon("WhiteKing.png"));
        panels = (JPanel) chessBoard.getComponent(3);
        panels.add(pieces);
        pieces = new JLabel(new ImageIcon("WhiteQueen.png"));
        panels = (JPanel) chessBoard.getComponent(4);
        panels.add(pieces);
        pieces = new JLabel(new ImageIcon("WhiteRook.png"));
        panels = (JPanel) chessBoard.getComponent(7);
        panels.add(pieces);
        for (int i = 48; i < 56; i++) {
            pieces = new JLabel(new ImageIcon("BlackPawn.png"));
            panels = (JPanel) chessBoard.getComponent(i);
            panels.add(pieces);
        }
        pieces = new JLabel(new ImageIcon("BlackRook.png"));
        panels = (JPanel) chessBoard.getComponent(56);
        panels.add(pieces);
        pieces = new JLabel(new ImageIcon("BlackKnight.png"));
        panels = (JPanel) chessBoard.getComponent(57);
        panels.add(pieces);
        pieces = new JLabel(new ImageIcon("BlackKnight.png"));
        panels = (JPanel) chessBoard.getComponent(62);
        panels.add(pieces);
        pieces = new JLabel(new ImageIcon("BlackBishup.png"));
        panels = (JPanel) chessBoard.getComponent(58);
        panels.add(pieces);
        pieces = new JLabel(new ImageIcon("BlackBishup.png"));
        panels = (JPanel) chessBoard.getComponent(61);
        panels.add(pieces);
        pieces = new JLabel(new ImageIcon("BlackKing.png"));
        panels = (JPanel) chessBoard.getComponent(59);
        panels.add(pieces);
        pieces = new JLabel(new ImageIcon("BlackQueen.png"));
        panels = (JPanel) chessBoard.getComponent(60);
        panels.add(pieces);
        pieces = new JLabel(new ImageIcon("BlackRook.png"));
        panels = (JPanel) chessBoard.getComponent(63);
        panels.add(pieces);
    }

    /*
		This method checks if there is a piece present on a particular square.
     */
    private Boolean piecePresent(int x, int y) {
        Component c = chessBoard.findComponentAt(x, y);
        if (c instanceof JPanel) {
            return false;
        } else {
            return true;
        }
    }

    /*
		This is a method to check if a piece is a Black piece.
     */
    private Boolean checkWhiteOpponent(int newX, int newY) {
        Boolean opponent;
        Component c1 = chessBoard.findComponentAt(newX, newY);
        JLabel awaitingPiece = (JLabel) c1;
        String tmp1 = awaitingPiece.getIcon().toString();
        if (((tmp1.contains("Black")))) {
            opponent = true;
        } else {
            opponent = false;
        }
        return opponent;
    }

    // This is a method to check if a piece is a white piece.
    private boolean checkBlackOpponent(int newX, int newY) {
        boolean opponent;
        Component c1 = chessBoard.findComponentAt(newX, newY);
        JLabel awaitingPiece = (JLabel) c1;
        String tmp1 = awaitingPiece.getIcon().toString();
        if (tmp1.contains("White")) {
            opponent = true;
        } else {
            opponent = false;
        }
        return opponent;
    }

    /*
		This method is called when we press the Mouse. So we need to find out what piece we have
		selected. We may also not have selected a piece!
     */
    public void mousePressed(MouseEvent e) {
        chessPiece = null;
        Component c = chessBoard.findComponentAt(e.getX(), e.getY());
        if (c instanceof JPanel) {
            return;
        }

        Point parentLocation = c.getParent().getLocation();
        xAdjustment = parentLocation.x - e.getX();
        yAdjustment = parentLocation.y - e.getY();
        chessPiece = (JLabel) c;
        initialX = e.getX();
        initialY = e.getY();
        startX = (e.getX() / 75);
        startY = (e.getY() / 75);
        chessPiece.setLocation(e.getX() + xAdjustment, e.getY() + yAdjustment);
        chessPiece.setSize(chessPiece.getWidth(), chessPiece.getHeight());
        layeredPane.add(chessPiece, JLayeredPane.DRAG_LAYER);
    }

    public void mouseDragged(MouseEvent me) {
        if (chessPiece == null) {
            return;
        }
        chessPiece.setLocation(me.getX() + xAdjustment, me.getY() + yAdjustment);
    }

    /*
		This method is used when the Mouse is released...we need to make sure the move was valid before
		putting the piece back on the board.
     */
    public void mouseReleased(MouseEvent e) {
        if (chessPiece == null) {
            return;
        }

        chessPiece.setVisible(false);

        Boolean success = false;
        Boolean progression = false;
        Boolean inTheWay = false;
        private Boolean checkBlackOpponent(int newX,int newY)

        Component c = chessBoard.findComponentAt(e.getX(), e.getY());
        String tmp = chessPiece.getIcon().toString();
        String pieceName = tmp.substring(0, (tmp.length() - 4));
        Boolean validMove = false;

        /*
  This code helps us to understand what is happening when a user starts
  to move pieces around the board. We are using the standard output to show
  - the name of the piece that is being moved
  - the starting square of a piece that is clicked
  - the distance in the x-direction that a player is trying to move the piece
  - the distance in the y-direction that a player is trying to move the piece
  - the landing square of where a player is returning the piece to the board

  Having this information printed out to the standard output as we test and construct the
  solution allows us to understand the constructs of the game...This code snippet below
  should be pasted into the following place:

         */
         int xMovement = Math.abs((e.getX() / 75) - startX);
         int yMovement = Math.abs((e.getY() / 75) - startY);
         int landingX = (e.getX() / 75);
         int landingY = (e.getY() / 75);
         int distance = Math.abs(startX - landingX);

        System.out.println("----------------------------------------------");
        System.out.println("The piece that is being moved is : " + pieceName);
        System.out.println("The starting coordinates are : " + "( " + startX + "," + startY + ")");
        System.out.println("The xMovement is : " + xMovement);
        System.out.println("The yMovement is : " + distance);
        System.out.println("The landing coordinates are : " + "( " + landingX + "," + landingY + ")");
        System.out.println("----------------------------------------------");


        /*
			The only piece that has been enabled to move is a White Pawn...but we should really have this is a separate
			method somewhere...how would this work.

			So a Pawn is able to move two squares forward one its first go but only one square after that.
			The Pawn is the only piece that cannot move backwards in chess...so be careful when committing
			a pawn forward. A Pawn is able to take any of the opponent’s pieces but they have to be one
			square forward and one square over, i.e. in a diagonal direction from the Pawns original position.
			If a Pawn makes it to the top of the other side, the Pawn can turn into any other piece, for
			demonstration purposes the Pawn here turns into a Queen.
         */
        if (pieceName.equals("WhitePawn")) {
            if ((startY == 1) && (startX == landingX) && (((landingY - startY) == 1) || (landingY - startY) == 2)) {
                if (!piecePresent(e.getX(), e.getY())) {
                    validMove = true;
                }
            } else if ((Math.abs(landingX - startX) == 1) && (((landingY - startY) == 1))) {
                if (piecePresent(e.getX(), e.getY())) {
                    if (checkWhiteOpponent(e.getX(), e.getY())) {
                        validMove = true;
                        if (landingY == 7) {
                            success = true;
                        }
                    } else {
                        validMove = false;
                    }
                } else {
                    validMove = false;
                }
            } else if ((startY != 1) && ((startX == landingX) && (((landingY - startY) == 1)))) {
                // If there is a piece in the way
                if (!piecePresent(e.getX(), e.getY())) {
                    validMove = true;
                    if (landingY == 7) {
                        success = true;
                    }
                } else {
                    validMove = false;
                }
            } else {
                validMove = false;
            }
        }
//from book
        // if (pieceName.equals("BlackPawn")) {
        //     if ((startY == 6) && (startX == landingX) && (((startY - landingY) == 1) ||(startY - landingY) == 2)) {
        //         if (!piecePresent(e.getX(), e.getY())) {
        //             validMove = true;
        //         }
        //     } else if ((Math.abs(startX - landingX) == 1) && (((startY - landingY) == 1))) {//here
        //         if (piecePresent(e.getX(), e.getY())) {
        //             if (checkBlackOpponent(e.getX(), e.getY())) {
        //                 validMove = true;
        //                 if (landingY == 0) {
        //                     progression = true;
        //                 }
        //             } else {
        //                 validMove = false;
        //             }
        //         } else {
        //             validMove = false;
        //         }
        //     } else if ((startY != 6) && ((startX == landingX) && (((startY - landingY) == 1)))) {//here
        //         // Check does the piece is in the way
        //         if (!piecePresent(e.getX(), e.getY())) {
        //             validMove = true;
        //             if (landingY == 0) {
        //                 progression = true;
        //             }
        //         } else {
        //             validMove = false;
        //         }
        //     } else {
        //         validMove = false;
        //     }
        // }
//my code
if (pieceName.equals("BlackPawn")) {
          if (startY == 6) {
              if ((startX == (e.getX() / 75)) && ((((e.getY() / 75) - startY) == -1) || ((e.getY() / 75) - startY) == -2)) {
                  if ((((e.getY() / 75) - startY) == -2)) {
                      if ((!piecePresent(e.getX(), (e.getY()))) && (!piecePresent(e.getX(), (e.getY() + 75)))) {
                          validMove = true;
                      } else {
                          validMove = false;
                      }
                  } else {
                      if ((!piecePresent(e.getX(), (e.getY())))) {
                          validMove = true;
                      } else {
                          validMove = false;
                      }
                  }
              } else {
                  validMove = false;
              }
          } else {
              int newY = e.getY() / 75;
              int newX = e.getX() / 75;
              if ((startX - 1 >= 0) || (startX + 1 <= 7)) {
                  if ((piecePresent(e.getX(), (e.getY()))) && ((((newX == (startX + 1) && (startX + 1 <= 7))) || ((newX == (startX - 1)) && (startX - 1 >= 0))))) {
                      if (checkBlackOpponent(e.getX(), e.getY())) {
                          validMove = true;
                          if (startY == 1) {
                              success = true;
                          }
                      } else {
                          validMove = false;
                      }
                  } else {
                      if (!piecePresent(e.getX(), (e.getY()))) {
                          if ((startX == (e.getX() / 75)) && ((e.getY() / 75) - startY) == -1) {
                              if (startY == 2) {
                                  success = true;
                              }
                              validMove = true;
                          } else {
                              validMove = false;
                          }
                      } else {
                          validMove = false;
                      }
                  }
              } else {
                  validMove = false;
              }
          }
      }
      //End of Pawn Moves
        if (pieceName.contains("Knight")) {
            if (((landingX < 0) || landingX > 7) || ((landingY < 0) || landingY > 7)) {
                validMove = false;
            } else if (((landingX == startX + 1) && (landingY == startY + 2)) || ((landingX == startX - 1) &&
            (landingY == startY + 2)) || (landingX == startX + 2)
			&& (landingY == startY + 1) ||
            (landingX == startX - 2)
			&& (landingY == startY + 1) || (landingX == startX + 1)
            && (landingY == startY - 2) || ((landingX == startX - 1)
			&& (landingY == startY - 2)) ||
            ((landingX == startX + 2)
			&& landingY == startY - 1) || ((landingX == startX - 2)
			&& (landingY == startY - 1))) {
                if (piecePresent(e.getX(), (e.getY()))) {
                    if (pieceName.contains("White")) {
                        if (checkWhiteOpponent(e.getX(), e.getY())) {
                            validMove = true;
                        } else {
                            validMove = false;
                        }
                    } else if (checkBlackOpponent(e.getX(), e.getY())) {
                        validMove = true;
                    } else {
                        validMove = false;
                    }
                } else {
                    validMove = true;
                }
            } else {
                validMove = false;
            }
        }

        if (pieceName.contains("Bishup")) {
            //Boolean inTheWay = false;
      //      int distance = Math.abs(startX - landingX);
            if (((landingX < 0) || (landingX > 7)) || ((landingY < 0) || (landingY > 7))) {
                validMove = false;
            } else {

          validMove = true;
            if (Math.abs(startX - landingX) == Math.abs(startY - landingY)) {
                if ((startX - landingX < 0) && (startY - landingY < 0)) {
                    for (int i = 0; i < distance; i++) {
                        if (piecePresent(initialX + (i * 75), initialY + (i * 75))) {
                            inTheWay = true;
                        }
                    }
                } else if ((startX - landingX < 0) && (startY - landingY > 0)) {
                    for (int i = 0; i < distance; i++) {
                        if (piecePresent(initialX + (i * 75), initialY - (i * 75))) {
                            inTheWay = true;
                        }
                    }
                } else if ((startX - landingX > 0) && (startY - landingY > 0)) {
                    for (int i = 0; i < distance; i++) {
                        if (piecePresent(initialX - (i * 75), initialY - (i * 75))) {
                            inTheWay = true;
                        }
                    }
                } else if ((startX - landingX > 0) && (startY - landingY < 0)) {
                    for (int i = 0; i < distance; i++) {
                        if (piecePresent(initialX - (i * 75), initialY + (i * 75))) {
                            inTheWay = true;
                        }
                    }
                }
                if (inTheWay) {
                    validMove = false;
                } else if (piecePresent(e.getX(), e.getY())) {
                    if (pieceName.contains("White")) {
                        validMove = checkWhiteOpponent(e.getX(), e.getY());
                    } else {
                        validMove = checkBlackOpponent(e.getX(), e.getY());
                    }
                } else {
                    validMove = true;
                }
            } else {
                validMove = false;
            }
        }
      }


//end of bishop


        if (pieceName.contains("Rook")) {
            if (((landingX < 0) || (landingX > 7)) || ((landingY < 0) || (landingY > 7))) {
                validMove = false;
            } else if (((Math.abs(startX - landingX) != 0) && (Math.abs(startY - landingY) == 0)) ||
            ((Math.abs(startX - landingX) == 0) && (Math.abs(landingY - startY) != 0))) {
                if (Math.abs(startX - landingX) != 0) {
                    if (startX - landingX > 0) {
                        for (int i = 0; i < xMovement; i++) {
                            if (piecePresent(initialX - (i * 75), e.getY())) {
                                inTheWay = true;
                                break;
                            } else {
                                inTheWay = false;
                            }
                        }
                    } else {
                        for (int i = 0; i < xMovement; i++) {
                            if (piecePresent(initialX + (i * 75), e.getY())) {
                                inTheWay = true;
                                break;
                            } else {
                                inTheWay = false;
                            }
                        }
                    }
                } else if (startY - landingY > 0) {
                    for (int i = 0; i < yMovement; i++) {
                        if (piecePresent(e.getX(), initialY - (i * 75))) {
                            inTheWay = true;
                            break;
                        } else {
                            inTheWay = false;
                        }
                    }
                } else {
                    for (int i = 0; i < yMovement; i++) {
                        if (piecePresent(e.getX(), initialY + (i * 75))) {
                            inTheWay = true;
                            break;
                        } else {
                            inTheWay = false;
                        }
                    }
                }
                if (inTheWay) {
                    validMove = false;
                } else if (piecePresent(e.getX(), e.getY())) {
                    if (pieceName.contains("White")) {
                        validMove = checkWhiteOpponent(e.getX(), e.getY());
                    } else {
                        validMove = checkBlackOpponent(e.getX(), e.getY());
                    }
                } else {
                    validMove = true;
                }
            } else {
                validMove = false;
            }
        }



        if (pieceName.contains("Queen")) {
            if (((landingX < 0) || (landingX > 7)) || ((landingY < 0) || (landingY > 7))) {
                validMove = false;
            } else if (((Math.abs(startX - landingX) != 0) && (Math.abs(startY - landingY) == 0)) ||
            ((Math.abs(startX - landingX) == 0) && (Math.abs(landingY - startY) != 0))) {
                if (Math.abs(startX - landingX) != 0) {
                    if (startX - landingX > 0) {
                        for (int i = 0; i < xMovement; i++) {
                            if (piecePresent(initialX - (i * 75), e.getY())) {
                                inTheWay = true;
                                break;
                            } else {
                                inTheWay = false;
                            }
                        }
                    } else {
                        for (int i = 0; i < xMovement; i++) {
                            if (piecePresent(initialX + (i * 75), e.getY())) {
                                inTheWay = true;
                                break;
                            } else {
                                inTheWay = false;
                            }
                        }
                    }
                } else if (startY - landingY > 0) {
                    for (int i = 0; i < yMovement; i++) {
                        if (piecePresent(e.getX(), initialY - (i * 75))) {
                            inTheWay = true;
                            break;
                        } else {
                            inTheWay = false;
                        }
                    }
                } else {
                    for (int i = 0; i < yMovement; i++) {
                        if (piecePresent(e.getX(), initialY + (i * 75))) {
                            inTheWay = true;
                            break;
                        } else {
                            inTheWay = false;
                        }
                    }
                }
                if (inTheWay) {
                    validMove = false;
                } else if (piecePresent(e.getX(), e.getY())) {
                    if (pieceName.contains("White")) {
                        validMove = checkWhiteOpponent(e.getX(), e.getY());
                    } else {
                        validMove = checkBlackOpponent(e.getX(), e.getY());
                    }
                } else {
                    validMove = true;
                }
            } else if (Math.abs(startX - landingX) == Math.abs(startY - landingY)) {
                if ((startX - landingX < 0) && (startY - landingY < 0)) {
                    for (int i = 0; i < distance; i++) {
                        if (piecePresent(initialX + (i * 75), initialY + (i * 75))) {
                            inTheWay = true;
                        }
                    }
                } else if ((startX - landingX < 0) && (startY - landingY > 0)) {
                    for (int i = 0; i < distance; i++) {
                        if (piecePresent(initialX + (i * 75), initialY - (i * 75))) {
                            inTheWay = true;
                        }
                    }
                } else if ((startX - landingX > 0) && (startY - landingY > 0)) {
                    for (int i = 0; i < distance; i++) {
                        if (piecePresent(initialX - (i * 75), initialY - (i * 75))) {
                            inTheWay = true;
                        }
                    }
                } else if ((startX - landingX > 0) && (startY - landingY < 0)) {
                    for (int i = 0; i < distance; i++) {
                        if (piecePresent(initialX - (i * 75), initialY + (i * 75))) {
                            inTheWay = true;
                        }
                    }
                }
                if (inTheWay) {
                    validMove = false;
                } else if (piecePresent(e.getX(), e.getY())) {
                    if (pieceName.contains("White")) {
                        validMove = checkWhiteOpponent(e.getX(), e.getY());
                    } else {
                        validMove = checkBlackOpponent(e.getX(), e.getY());
                    }
                } else {
                    validMove = true;
                }
            } else {
                validMove = false;
            }
        }

      //  my code for king
        if(pieceName.contains("King")){

        // //Boolean inTheWay=false;
        //   if(
        //   ((startY==0)&&((startX==landingX)&&((startY-landingY)==-1)))||
        //   ((startY==7)&&((startX==landingX)&&((startY-landingY)==1)))||
        //   ((startY==0)&&(((startX-landingX)==-1)&&((startY-landingY)==-1)))||
        //   ((startY==0)&&(((startX-landingX)==1)&&((startY-landingY)==-1)))||
        //   ((startY==7)&&(((startX-landingX)== -1)&&((startY-landingY)==1)))||
        //   ((startY==7)&&(((startX-landingX)==1)&&((startY-landingY)==1)))){
        //
        //
        //     System.out.println(startX-landingX+"you moved king");
        //
        //      if(!piecePresent(e.getX(),e.getY())){
        //
        //        validMove=true;
        //      }else{validMove=false;}
        //    }
        //        else if(
        //         ((startY !=0)&&((startX==landingX)&&((startY-landingY)==-1)))||
        //         ((startY !=7)&&((startX==landingX)&&((startY-landingY)== 1)))||
        //         ((startY !=0)&&(((startX-landingX)==-1)&&(startY==landingY)))||
        //         ((startY !=7)&&(((startX-landingX)==1)&&(startY==landingY)))||
        //         ((startY !=0)&&(((startX-landingX)==-1)&&((startY-landingY)==-1)))||
        //         ((startY !=7)&&(((startX-landingX)==-1)&&((startY-landingY)==1)))||
        //         ((startY !=0)&&(((startX-landingX)==1)&&((startY-landingY)==-1)))||
        //         ((startY !=7)&&(((startX-landingX)==1)&&((startY-landingY)==1)))){
        //            if(!piecePresent(e.getX(),e.getY())){
        //              validMove=true;
        //            }else{
        //              validMove=false;
        //            }
        //
        //          }
        //           else{
        //             validMove=false;
        //               }
        //        // check for pieces in the way
        //
        //        }


               // if(!piecePresent(e.getX(),e.getY())){
                                    // System.out.println(startX-landingX+" you moved king");
                                    // //validMove=true;
                                    // if((startX - landingX < 0) && (startY - landingY >0)){
                                    //   for(int i=0;i<8; i++){
                                    //     if(piecePresent(landingX -(i*75), landingY - (i*75))){
                                    //       if(pieceName.contains("Black")){
                                    //          System.out.println("cant move there");
                                    //          validMove = false;
                                    //          break;
                                    //       }else{
                                    //        validMove = true;
                                    //        break;
                                    //       }
                                    //     }
                                    //   }
                                    // }

                                   // if(piecePresent((e.getX()/75)-1, (e.getY()/75)-1)||
                                   //   piecePresent((e.getX()/75)-1, (e.getY()/75)+1)||
                                   //   piecePresent((e.getX()/75)+1, (e.getY()/75)-1)||
                                   //   piecePresent((e.getX()/75)+1, (e.getY()/75)+1)||
                                   //   piecePresent((e.getX()/75)-1, e.getY())||
                                   //   piecePresent((e.getX()/75)+1, e.getY())||
                                   //   piecePresent(e.getX(), (e.getY()/75)-1)||
                                   //   piecePresent(e.getX(), (e.getY()/75)+1)){
                                   //
                                   // validMove=false;
                                   // }
                                   // else{
                                   //   validMove=true;
                                   // }
                                 //}
    // Marcel
            //   Boolean KingGuard=true;
        if (pieceName.contains("King")) {
            if (((landingX<0)||(landingX>7))||((landingY<0)||(landingY>7))) {
              validMove = false;
            }else if(((Math.abs(startX-landingX)<=1))&&((Math.abs(startY-landingY)<=1))){
          ///  //  if(KingGuard(landingX,landingY)){
            validMove=true;
            if (piecePresent(e.getX(), e.getY())) {
              if(pieceName.contains("White")){
                if(checkWhiteOpponent(e.getX(),e.getY())){
                  validMove=true;
                }else{
                  validMove=false;
                  System.out.println("king test is 1");
                }
              }else if(pieceName.contains("Black")){
                if(checkBlackOpponent(e.getX(),e.getY())){
                  validMove=true;
                }else{
                  validMove=false;
                  System.out.println("King test2");
                }
              }
            }else if(!piecePresent(e.getX(),e.getY())){
              validMove=true;
            }
          }
        }else{
          validMove=false;
          System.out.println("Failed to move king");
        }
      }



          // king

        if (!validMove) {
            int location = 0;
            if (startY == 0) {
                location = startX;
            } else {
                location = (startY * 8) + startX;
            }
            String pieceLocation = pieceName + ".png";
            pieces = new JLabel(new ImageIcon(pieceLocation));
            panels = (JPanel) chessBoard.getComponent(location);
            panels.add(pieces);
        } else if (progression) {
            int location = 0 + (e.getX() / 75);
            if (c instanceof JLabel) {
                Container parent = c.getParent();
                parent.remove(0);
                pieces = new JLabel(new ImageIcon("BlackQueen.png"));
                parent = (JPanel) chessBoard.getComponent(location);
                parent.add(pieces);
            }
        } else if (success) {
            int location = 56 + (e.getX() / 75);
            if (c instanceof JLabel) {
                Container parent = c.getParent();
                parent.remove(0);
                pieces = new JLabel(new ImageIcon("WhiteQueen.png"));
                parent = (JPanel) chessBoard.getComponent(location);
                parent.add(pieces);
            } else {
                Container parent = (Container) c;
                pieces = new JLabel(new ImageIcon("WhiteQueen.png"));
                parent = (JPanel) chessBoard.getComponent(location);
                parent.add(pieces);
            }
        } else {
            if (c instanceof JLabel) {
                Container parent = c.getParent();
                parent.remove(0);
                parent.add(chessPiece);
            } else {
                Container parent = (Container) c;
                parent.add(chessPiece);
            }
            chessPiece.setVisible(true);
        }
    }


    public void mouseClicked(MouseEvent e) {

    }

    public void mouseMoved(MouseEvent e) {
    }

    public void mouseEntered(MouseEvent e) {

    }

    public void mouseExited(MouseEvent e) {

    }

    /*
		Main method that gets the ball moving.
     */
    public static void main(String[] args) {
        JFrame frame = new ChessProject();
        frame.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        frame.pack();
        frame.setResizable(true);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }
}

